import random
import re
import json
import time
import requests
from bs4 import BeautifulSoup
from django.core.management.base import BaseCommand
from main.models import Institute, Specialty, AcademicGroup


class Command(BaseCommand):
    help = "–ü–∞—Ä—Å–∏—Ç –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≥—Ä—É–ø–ø—ã –∏–∑ ecampus.ncfu.ru/schedule"

    def handle(self, *args, **options):
        url = "https://ecampus.ncfu.ru/schedule"

        self.stdout.write("üîç –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        response = requests.get(url)
        soup = BeautifulSoup(response.text, "html.parser")

        script = soup.find("script", type="text/javascript", string=re.compile("viewModel"))
        match = re.search(r"var\s+viewModel\s*=\s*(\{.*\});", script.string, re.S)
        json_text = re.sub(r'JSON\.parse\((\".*?\")\)', r'\1', match.group(1))
        data_json = json.loads(json_text)
        institutes = data_json.get("Institutes", [])

        self.stdout.write(f"üìò –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤: {len(institutes)}")

        # === 1. –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å—Ç–∏—Ç—É—Ç—ã ===
        for inst in institutes:
            inst_id = inst["Id"] or random.randint(1000000000, 9999999999)
            Institute.objects.update_or_create(
                id=inst_id,
                defaults={
                    "ShortName": inst.get("ShortName", ""),
                    "Name": inst.get("Name", ""),
                    "BranchId": inst.get("BranchId", ""),
                },
            )

        self.stdout.write(f"üè´ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤: {Institute.objects.count()}")

        # === 2. –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ===
        for institute in Institute.objects.all():
            payload = {
                "instituteId": None if len(str(institute.id)) == 10 else institute.id,
                "branchId": institute.BranchId,
            }
            while True:
                try:
                    start_time = time.time()
                    specialties = requests.post(
                        "https://ecampus.ncfu.ru/schedule/GetSpecialities",
                        data=payload,
                        timeout=3,  
                    )
                    duration = time.time() - start_time

                    if duration > 3:
                        continue  

                    specialties = specialties.json()
                    break  

                except (requests.Timeout, requests.ConnectionError, ValueError):
                    self.stdout.write(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...")
                    time.sleep(2)

            for spec in specialties:
                Specialty.objects.update_or_create(
                    Name=spec["Name"],
                    InstituteID=institute,
                    defaults={},
                )

            self.stdout.write(f"üìö {institute.Name}: {len(specialties)} —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")

        self.stdout.write(f"üìò –í—Å–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π: {Specialty.objects.count()}")

        # === 3. –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã ===
        for specialty in Specialty.objects.all():
            institute = specialty.InstituteID
            payload = {
                "instituteId": None if len(str(institute.id)) == 10 else institute.id,
                "branchId": institute.BranchId,
                "specialty": specialty.Name,
            }
            while True:
                try:
                    start_time = time.time()
                    groups = requests.post(
                        "https://ecampus.ncfu.ru/schedule/GetAcademicGroups",
                        data=payload,
                        timeout=3,  # –º–∞–∫—Å–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –æ–∂–∏–¥–∞–Ω–∏—è
                    )
                    duration = time.time() - start_time

                    if duration > 3:
                        self.stdout.write(f"‚è± –ó–∞–ø—Ä–æ—Å –¥–ª—è '{specialty.Name}' –∑–∞–Ω—è–ª {duration:.1f}—Å ‚Äî –ø–æ–≤—Ç–æ—Ä...")
                        continue  # –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å

                    groups_json = groups.json()
                    break  # –≤—ã–π—Ç–∏ –∏–∑ while –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–≤–µ—Ç–µ

                except (requests.Timeout, requests.ConnectionError, ValueError):
                    self.stdout.write(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø '{specialty.Name}', –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫...")
                    time.sleep(2)

            for edu_block in groups_json:
                edu_level = edu_block.get("Key")
                for group in edu_block.get("Value", []):
                    AcademicGroup.objects.update_or_create(
                        id=group["Id"],
                        defaults={
                            "Name": group["Name"],
                            "EduLevel": group.get("EduLevel", edu_level),
                            "SpecialtyId": specialty,
                        },
                    )

            self.stdout.write(f"üë• {specialty.Name}: –≥—Ä—É–ø–ø—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")

        self.stdout.write(self.style.SUCCESS("‚úÖ –ò–Ω—Å—Ç–∏—Ç—É—Ç—ã, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"))
