# import asyncio
# from aiogram import Bot, Dispatcher, types
# from aiogram.filters import Command
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.fsm.storage.memory import MemoryStorage
# import requests


# API_TOKEN = "8270550557:AAEu_-4P1SAbpBOqfZ_7FGTXaPQ3J7nAzho"

# # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
# bot = Bot(token=API_TOKEN)
# dp = Dispatcher(storage=MemoryStorage())


# # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
# class AuthForm(StatesGroup):
#     login = State()
#     password = State()
#     captcha_code = State()


# # # –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
# # @dp.message(Command("start"))
# # async def cmd_start(message: types.Message, state: FSMContext):
# #     await state.set_state(Form.name)
# #     await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# # –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message, state: FSMContext):
#     await state.set_state(AuthForm.login)
#     await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω")

# # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–º–µ–Ω–∏
# @dp.message(AuthForm.login)
# async def process_name(message: types.Message, state: FSMContext):
#     await state.update_data(login=message.text)
#     await state.set_state(AuthForm.password)
#     await message.answer("–ü–∞—Ä–æ–ª—å:")

# @dp.message(AuthForm.password)
# async def process_name(message: types.Message, state: FSMContext):
#     session = requests.Session()

# # # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–º–µ–Ω–∏
# # @dp.message(Form.name)
# # async def process_name(message: types.Message, state: FSMContext):
# #     await state.update_data(name=message.text)
# #     await state.set_state(Form.age)
# #     await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


# # # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞
# # @dp.message(Form.age)
# # async def process_age(message: types.Message, state: FSMContext):
# #     data = await state.get_data()
# #     await message.answer(f"–¢–µ–±—è –∑–æ–≤—É—Ç {data['name']}, —Ç–µ–±–µ {message.text} –ª–µ—Ç.")
# #     await state.clear()


# # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# async def main():
#     await dp.start_polling(bot)


# if __name__ == "__main__":
#     asyncio.run(main())

import asyncio
import re
import os
import uuid
import json
import requests
from bs4 import BeautifulSoup

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from datetime import datetime, timedelta

API_TOKEN = "8270550557:AAEu_-4P1SAbpBOqfZ_7FGTXaPQ3J7nAzho"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

# FSM
class AuthForm(StatesGroup):
    login = State()
    password = State()
    captcha_code = State()

# /login
@router.message(F.text == "/login")
async def login_cmd(message: Message, state: FSMContext):
    session = requests.Session()
    login_url = "https://ecampus.ncfu.ru/account/login"
    resp = session.get(login_url)
    soup = BeautifulSoup(resp.text, "html.parser")

    token_tag = soup.find("input", {"name": "__RequestVerificationToken"})
    captcha_tag = soup.find("img", {"alt": "captcha"})

    if not token_tag or not captcha_tag:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–ª–∏ –∫–∞–ø—á—É üò¢")
        return

    token = token_tag["value"]
    captcha_url = "https://ecampus.ncfu.ru" + captcha_tag["src"]

    filename = f"captcha_{uuid.uuid4().hex}.jpg"
    filepath = os.path.join("captcha", filename)
    os.makedirs(os.path.dirname(filepath), exist_ok=True)

    captcha_resp = session.get(captcha_url)
    with open(filepath, "wb") as f:
        f.write(captcha_resp.content)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∫—É–∫–∏ –≤ FSM
    await state.update_data(
        cookies=session.cookies.get_dict(),
        token=token
    )

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthForm.login)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø—á—É
    await message.answer_photo(FSInputFile(filepath), caption="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:")

# –ª–æ–≥–∏–Ω
@router.message(AuthForm.login)
async def process_login(message: Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthForm.password)

# –ø–∞—Ä–æ–ª—å
@router.message(AuthForm.password)
async def process_password(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É:")
    await state.set_state(AuthForm.captcha_code)

# –∫–∞–ø—á–∞
@router.message(AuthForm.captcha_code)
async def process_captcha(message: Message, state: FSMContext):
    data = await state.get_data()
    cookies = data["cookies"]
    token = data["token"]

    session = requests.Session()
    session.cookies.update(cookies)

    payload = {
        "__RequestVerificationToken": token,
        "Login": data["login"],
        "Password": data["password"],
        "Code": message.text,
        "RememberMe": "false",
    }

    resp = session.post("https://ecampus.ncfu.ru/account/login", data=payload)
    get_id = session.get("https://ecampus.ncfu.ru/schedule/my/student")
    soup2 = BeautifulSoup(get_id.text, "html.parser")
    script = soup2.find("script", type="text/javascript", string=re.compile("viewModel"))

    model_id = None
    if script:
        text = script.string
        match = re.search(r"var\s+viewModel\s*=\s*(\{.*\});", text, re.S)
        if match:
            json_text = match.group(1)
            json_text = re.sub(r'JSON\.parse\((\".*?\")\)', r'\1', json_text)
            data_json = json.loads(json_text)
            model_id = data_json["Model"]["Id"]

    await state.update_data(cookies=session.cookies.get_dict(), ecampus_id=model_id)

    await message.answer(f"–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚úÖ Id={model_id}")
    print(session.cookies.get_dict())
    await state.set_state(None)


def get_monday_date():
    today = datetime.today()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    monday = today - timedelta(days=today.weekday())
    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –¥–æ–±–∞–≤—å timedelta(days=7)
    return monday.strftime("%Y-%m-%dT00:00:00.000Z")

# —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.message(Command("schedule"))
async def get_schedule(message: Message, state: FSMContext):
    data = await state.get_data()
    cookies = data.get("cookies")
    model_id = data.get("ecampus_id")

    monday_date = get_monday_date()  # —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

    payload = {
        "Id": model_id,
        "date": monday_date,
        "targetType": 4
    }

    resp = requests.post(
        "https://ecampus.ncfu.ru/Schedule/GetSchedule",
        cookies=cookies,
        data=payload
    )

    try:
        schedule = resp.json()   # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Python-–æ–±—ä–µ–∫—Ç—ã
    except json.JSONDecodeError:
        await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON")
        return

    if not schedule:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        return

    text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é —Å {monday_date[:10]}:\n\n"

    for day in schedule:
        weekday = day.get("WeekDay")
        date = day.get("Date")[:10]
        text += f"=== {weekday} ({date}) ===\n"

        lessons = day.get("Lessons", [])
        if not lessons:
            text += "  ‚ùå –ù–µ—Ç –ø–∞—Ä\n\n"
            continue

        for lesson in lessons:
            discipline = lesson.get("Discipline")
            lesson_type = lesson.get("LessonType")
            time_begin = lesson.get("TimeBegin")[11:16]
            time_end = lesson.get("TimeEnd")[11:16]
            teacher = lesson.get("Teacher", {}).get("Name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            aud = lesson.get("Aud", {}).get("Name", "‚Äî")
            group = ", ".join(g["Name"] for g in lesson.get("Groups", []))

            text += (
                f"‚è∞ {time_begin}‚Äì{time_end}\n"
                f"üìñ {discipline} ({lesson_type})\n"
                f"üë®‚Äçüè´ {teacher}\n"
                f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group}\n\n"
            )

    # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è 4096 —Å–∏–º–≤–æ–ª–∞–º–∏
    for chunk in [text[i:i+4000] for i in range(0, len(text), 4000)]:
        await message.answer(chunk)

dp.include_router(router)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
