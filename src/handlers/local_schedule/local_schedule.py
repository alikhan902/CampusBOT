from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from datetime import timedelta
from states.states import ScheduleForm
from .utils import get_monday_date

router = Router()


@router.message(Command("locsh"))
async def schedule_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî –≥—Ä—É–ø–ø–∞ / –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å / –∞—É–¥–∏—Ç–æ—Ä–∏—è:")
    await state.set_state(ScheduleForm.TypeSchedule)


@router.message(ScheduleForm.TypeSchedule)
async def schedule_type(message: Message, state: FSMContext):
    await state.update_data(type=message.text.strip().lower())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è / –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã / –∞—É–¥–∏—Ç–æ—Ä–∏–∏:")
    await state.set_state(ScheduleForm.NameType)


@router.message(ScheduleForm.NameType)
async def schedule_name(message: Message, state: FSMContext, session):
    await state.update_data(typename=message.text.strip())
    data = await state.get_data()
    await state.set_state(None)

    base_url = "http://localhost:8000/api/schedule/"
    type_ = data.get("type")
    name = data.get("typename")

    if "–≥—Ä—É–ø" in type_:
        url = f"{base_url}?group={name}"
    elif "–ø—Ä–µ–ø" in type_:
        url = f"{base_url}?teacher={name}"
    elif "–∞—É–¥" in type_:
        url = f"{base_url}?room={name}"
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø. –í–≤–µ–¥–∏—Ç–µ: –≥—Ä—É–ø–ø–∞ / –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å / –∞—É–¥–∏—Ç–æ—Ä–∏—è.")
        return

    await message.answer("üì° –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")

    async with session.get(url) as resp:
        if resp.status != 200:
            await message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {resp.status}")
            return

        try:
            schedule = await resp.json()
        except Exception:
            await message.answer("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON üòï")
            return

    if not schedule:
        await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï")
        return

    monday_date = get_monday_date()

    text = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞—è —Å {monday_date.strftime('%Y-%m-%d')} (1 –Ω–µ–¥–µ–ª—è)\n\n"
    day_offset = 0 

    weekdays_order = [
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "–í—Ç–æ—Ä–Ω–∏–∫",
        "–°—Ä–µ–¥–∞",
        "–ß–µ—Ç–≤–µ—Ä–≥",
        "–ü—è—Ç–Ω–∏—Ü–∞",
        "–°—É–±–±–æ—Ç–∞",
        "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    ]

    for day in schedule:
        lessons = day.get("lessons", [])
        weekday = lessons[0].get("weekday", "-") if lessons else "‚Äî"

        try:
            day_offset = weekdays_order.index(weekday)
        except ValueError:
            day_offset = 0

        day_date = (monday_date + timedelta(days=day_offset)).strftime("%Y-%m-%d")

        text += f"=== {weekday} ({day_date}) ===\n"

        if not lessons:
            text += "  ‚ùå –ù–µ—Ç –ø–∞—Ä\n\n"
            continue

        for lesson in lessons:
            discipline = lesson.get("discipline", "?")
            lesson_type = lesson.get("lesson_type", "?")
            time_begin = (lesson.get("time_begin", "?"))[:5]
            time_end = (lesson.get("time_end", "?"))[:5]
            teacher = (lesson.get("teacher") or {}).get("Name", "‚Äî")
            room = (lesson.get("room") or {}).get("Name", "‚Äî")
            group = (lesson.get("group") or {}).get("Name", "‚Äî")
            subgroup = lesson.get("subgroup") or ""

            text += (
                f"‚è∞ {time_begin}‚Äì{time_end}\n"
                f"üìñ {discipline} ({lesson_type})\n"
                f"üë®‚Äçüè´ {teacher}\n"
                f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {room}\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group} {subgroup}\n\n"
            )

    for chunk in [text[i:i + 4000] for i in range(0, len(text), 4000)]:
        await message.answer(chunk, parse_mode="HTML")
